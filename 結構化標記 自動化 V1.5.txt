<script src="https://cdn.jsdelivr.net/npm/lodash/lodash.min.js"></script>
<script>
(async () => {
  const debugMode = true;

  const debugLog = (...messages) => {
    if (debugMode) {
      console.log('[Structured Data Script]', window.location.href, ...messages);
    }
  };

  const toAbsoluteUrl = (url) => {
    try {
      const a = document.createElement('a');
      a.href = url;
      return a.href;
    } catch (error) {
      debugLog('Error converting to absolute URL:', error);
      return url;
    }
  };

  const getDefaultImage = () => "https://www.example.com/default-image.jpg";

  const getMetaTags = () => {
    try {
      debugLog('Fetching meta tags...');
      const metaTags = {};
      document.querySelectorAll('meta[name], meta[property]').forEach(tag => {
        const name = (tag.getAttribute('name') || tag.getAttribute('property')).toLowerCase();
        const content = tag.getAttribute('content');
        if (content && content.trim() !== '') {
          metaTags[name] = content.trim();
          debugLog(`- Found meta tag: ${name} = ${content.trim()}`);
        }
      });
      debugLog('Extracted meta tags:', metaTags);
      return metaTags;
    } catch (error) {
      debugLog('Error fetching meta tags:', error);
      return {};
    }
  };

  const fetchExternalData = async () => {
    try {
      const response = await fetch('https://api.example.com/data');
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const data = await response.json();
      debugLog('Fetched external data:', data);
      return data;
    } catch (error) {
      debugLog('Error fetching external data:', error);
      return {};
    }
  };

  const determinePageType = (metaTags) => {
    try {
      debugLog('Determining page type...');
      const hasVideo = document.querySelector('video') !== null;
      const isBlogPath = window.location.pathname.startsWith('/blog/');
      const hasArticleSection = !!metaTags['article:section'];
      const hasFAQSection = document.querySelector('.faq-section') !== null;
      const isProductPage = !!metaTags['product:name'];
      const isEventPage = !!metaTags['event:name'];
      const isHomepage = window.location.pathname === '/' || window.location.pathname === '/index.html';
      const isCategoryPage = window.location.pathname.includes('/category/') || window.location.pathname.includes('/tag/');

      if (hasVideo) {
        debugLog('- Page type: VideoObject');
        return 'VideoObject';
      }
      if (isProductPage) {
        debugLog('- Page type: Product');
        return 'Product';
      }
      if (isEventPage) {
        debugLog('- Page type: Event');
        return 'Event';
      }
      if (isHomepage) {
        debugLog('- Page type: WebSite Homepage');
        return 'WebSite';
      }
      if (isCategoryPage) {
        debugLog('- Page type: CollectionPage');
        return 'CollectionPage';
      }
      if (isBlogPath || hasArticleSection) {
        debugLog('- Page type: Article');
        return 'Article';
      }
      if (hasFAQSection) {
        debugLog('- Page type: FAQPage');
        return 'FAQPage';
      }
      debugLog('- Page type: WebSite');
      return 'WebSite';
    } catch (error) {
      debugLog('Error determining page type:', error);
      return 'WebSite';
    }
  };

  const getImageObjects = (metaTags) => {
    try {
      debugLog('Fetching image objects...');
      const images = [];
      const imageSources = [
        { property: 'og:image', width: 'og:image:width', height: 'og:image:height', alt: 'og:image:alt' },
        { property: 'twitter:image', width: 'twitter:image:width', height: 'twitter:image:height', alt: 'twitter:image:alt' }
      ];

      imageSources.forEach(source => {
        const url = metaTags[source.property];
        if (url) {
          const absoluteUrl = toAbsoluteUrl(url);
          if (!_.some(images, { url: absoluteUrl })) {
            images.push({
              "@type": "ImageObject",
              "url": absoluteUrl,
              "width": metaTags[source.width] ? parseInt(metaTags[source.width], 10) : undefined,
              "height": metaTags[source.height] ? parseInt(metaTags[source.height], 10) : undefined,
              "name": metaTags[source.alt] || undefined
            });
            debugLog(`- Added image: ${absoluteUrl}`);
          }
        }
      });

      document.querySelectorAll('img[src]').forEach(img => {
        const url = img.getAttribute('src');
        if (url) {
          const absoluteUrl = toAbsoluteUrl(url);
          if (!_.some(images, { url: absoluteUrl })) {
            images.push({
              "@type": "ImageObject",
              "url": absoluteUrl,
              "width": img.getAttribute('width') ? parseInt(img.getAttribute('width'), 10) : undefined,
              "height": img.getAttribute('height') ? parseInt(img.getAttribute('height'), 10) : undefined,
              "name": img.getAttribute('alt') || undefined
            });
            debugLog(`- Added image: ${absoluteUrl}`);
          }
        }
      });

      if (images.length === 0) {
        images.push({
          "@type": "ImageObject",
          "url": getDefaultImage()
        });
        debugLog(`- Added default image: ${getDefaultImage()}`);
      }

      debugLog('Extracted image objects:', images);
      return images.length > 0 ? images : undefined;
    } catch (error) {
      debugLog('Error fetching image objects:', error);
      return undefined;
    }
  };

  const getArticleBody = () => {
    try {
      debugLog('Fetching article body...');
      const article = document.querySelector('article');
      if (article) {
        const headings = [];
        for (let i = 1; i <= 6; i++) {
          document.querySelectorAll(`h${i}`).forEach(h => {
            headings.push({ level: i, text: h.textContent.trim() });
          });
        }
        const articleBody = article.textContent.trim();
        debugLog('- Article body found with headings:', headings);
        return articleBody;
      }
      debugLog('- No article body found.');
      return undefined;
    } catch (error) {
      debugLog('Error fetching article body:', error);
      return undefined;
    }
  };

  const getBreadcrumb = () => {
    try {
      debugLog('Fetching breadcrumb...');
      const breadcrumbList = [];
      const breadcrumbItems = document.querySelectorAll('.breadcrumbs li, nav.breadcrumb li, ul.breadcrumb li');

      breadcrumbItems.forEach((item, index) => {
        const link = item.querySelector('a');
        const breadcrumbItem = {
          "@type": "ListItem",
          "position": index + 1,
          "name": item.textContent.trim()
        };
        if (link) {
          breadcrumbItem.item = toAbsoluteUrl(link.getAttribute('href'));
        }
        breadcrumbList.push(breadcrumbItem);
        debugLog(`- Added breadcrumb item: ${breadcrumbItem.name}`);
      });

      if (breadcrumbList.length > 0) {
        debugLog('Extracted breadcrumb items:', breadcrumbList);
        return {
          "@type": "BreadcrumbList",
          "itemListElement": breadcrumbList
        };
      }
      debugLog('- No breadcrumb found.');
      return undefined;
    } catch (error) {
      debugLog('Error fetching breadcrumb:', error);
      return undefined;
    }
  };

  const getFAQ = () => {
    try {
      debugLog('Fetching FAQ items...');
      const faqItems = [];
      const faqElements = document.querySelectorAll('.faq-section .question, .faq .question');

      faqElements.forEach(element => {
        const question = element.textContent.trim();
        const answerElement = element.nextElementSibling;
        const answer = answerElement ? answerElement.textContent.trim() : undefined;

        const faqItem = {
          "@type": "Question",
          "name": question
        };

        if (answer) {
          faqItem.acceptedAnswer = {
            "@type": "Answer",
            "text": answer
          };
        }

        faqItems.push(faqItem);
        debugLog(`- Added FAQ item: ${faqItem.name}`);
      });

      if (faqItems.length > 0) {
        debugLog('Extracted FAQ items:', faqItems);
        return faqItems;
      }
      debugLog('- No FAQ items found.');
      return undefined;
    } catch (error) {
      debugLog('Error fetching FAQ items:', error);
      return undefined;
    }
  };

  const getOrganization = (metaTags) => {
    try {
      debugLog('Fetching organization data...');
      const organization = {
        "@type": "Organization",
        "name": metaTags['business:name'] || metaTags['og:site_name'] || 'Default Organization',
        "url": window.location.href,
        "logo": {
          "@type": "ImageObject",
          "url": metaTags['business:logo'] || metaTags['og:image'] || toAbsoluteUrl('/logo.png')
        },
        "sameAs": [
          metaTags['business:facebook'],
          metaTags['business:twitter'],
          metaTags['business:linkedin']
        ].filter(Boolean)
      };
      debugLog('Organization data:', organization);
      return organization;
    } catch (error) {
      debugLog('Error fetching organization data:', error);
      return undefined;
    }
  };

  const getPerson = (metaTags) => {
    try {
      debugLog('Fetching person data...');
      const person = {
        "@type": "Person",
        "name": metaTags['author'] || 'Unknown Author',
        "url": window.location.href,
        "image": metaTags['author:image'] || toAbsoluteUrl('/default-person.png'),
        "sameAs": [
          metaTags['author:facebook'],
          metaTags['author:twitter'],
          metaTags['author:linkedin']
        ].filter(Boolean)
      };
      debugLog('Person data:', person);
      return person;
    } catch (error) {
      debugLog('Error fetching person data:', error);
      return undefined;
    }
  };

  const getProduct = (metaTags) => {
    try {
      debugLog('Fetching product data...');
      if (!metaTags['product:name']) {
        debugLog('- Not a product page, skipping product data.');
        return undefined;
      }

      const product = {
        "@type": "Product",
        "name": metaTags['product:name'] || metaTags['og:title'] || '',
        "image": getImageObjects(metaTags) || [],
        "description": metaTags['product:description'] || metaTags['description'] || '',
        "sku": metaTags['product:sku'] || '',
        "brand": {
          "@type": "Brand",
          "name": metaTags['product:brand'] || 'Unknown Brand'
        },
        "offers": {
          "@type": "Offer",
          "url": window.location.href,
          "priceCurrency": metaTags['product:pricecurrency'] || 'USD',
          "price": metaTags['product:price'] || '',
          "priceValidUntil": metaTags['product:pricevaliduntil'] || '',
          "itemCondition": "https://schema.org/NewCondition",
          "availability": "https://schema.org/InStock"
        }
      };
      debugLog('Product data:', product);
      return product;
    } catch (error) {
      debugLog('Error fetching product data:', error);
      return undefined;
    }
  };

  const getLocalBusiness = (metaTags) => {
    try {
      debugLog('Fetching local business data...');
      if (!metaTags['business:name']) {
        debugLog('- Not a local business page, skipping local business data.');
        return undefined;
      }

      const localBusiness = {
        "@type": "LocalBusiness",
        "name": metaTags['business:name'] || metaTags['og:site_name'] || 'Default Business',
        "image": metaTags['business:image'] || metaTags['og:image'] || toAbsoluteUrl('/default-business.png'),
        "address": {
          "@type": "PostalAddress",
          "streetAddress": metaTags['business:streetaddress'] || '',
          "addressLocality": metaTags['business:addresslocality'] || '',
          "addressRegion": metaTags['business:addressregion'] || '',
          "postalCode": metaTags['business:postalcode'] || '',
          "addressCountry": metaTags['business:addresscountry'] || ''
        },
        "telephone": metaTags['business:telephone'] || '',
        "openingHours": metaTags['business:openinghours'] ? metaTags['business:openinghours'].split(',') : [],
        "url": window.location.href,
        "sameAs": [
          metaTags['business:facebook'],
          metaTags['business:twitter'],
          metaTags['business:linkedin']
        ].filter(Boolean)
      };
      debugLog('LocalBusiness data:', localBusiness);
      return localBusiness;
    } catch (error) {
      debugLog('Error fetching local business data:', error);
      return undefined;
    }
  };

  const getEvent = (metaTags) => {
    try {
      debugLog('Fetching event data...');
      if (!metaTags['event:name']) {
        debugLog('- Not an event page, skipping event data.');
        return undefined;
      }

      const event = {
        "@type": "Event",
        "name": metaTags['event:name'] || metaTags['og:title'] || '',
        "startDate": metaTags['event:startdate'] ? new Date(metaTags['event:startdate']).toISOString() : '',
        "endDate": metaTags['event:enddate'] ? new Date(metaTags['event:enddate']).toISOString() : '',
        "eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode",
        "eventStatus": "https://schema.org/EventScheduled",
        "location": {
          "@type": "Place",
          "name": metaTags['event:locationname'] || '',
          "address": {
            "@type": "PostalAddress",
            "streetAddress": metaTags['event:streetaddress'] || '',
            "addressLocality": metaTags['event:addresslocality'] || '',
            "addressRegion": metaTags['event:addressregion'] || '',
            "postalCode": metaTags['event:postalcode'] || '',
            "addressCountry": metaTags['event:addresscountry'] || ''
          }
        },
        "image": getImageObjects(metaTags) || [],
        "description": metaTags['event:description'] || metaTags['description'] || '',
        "offers": {
          "@type": "Offer",
          "url": window.location.href,
          "price": metaTags['event:price'] || '0',
          "priceCurrency": metaTags['event:pricecurrency'] || 'USD',
          "availability": "https://schema.org/InStock",
          "validFrom": metaTags['event:validfrom'] || new Date().toISOString()
        }
      };
      debugLog('Event data:', event);
      return event;
    } catch (error) {
      debugLog('Error fetching event data:', error);
      return undefined;
    }
  };

  const getAggregateRating = (metaTags) => {
    try {
      debugLog('Fetching aggregate rating...');
      if (!metaTags['aggregaterating:ratingvalue']) {
        debugLog('- No aggregate rating found.');
        return undefined;
      }

      const aggregateRating = {
        "@type": "AggregateRating",
        "ratingValue": metaTags['aggregaterating:ratingvalue'],
        "reviewCount": metaTags['aggregaterating:reviewcount'] || '0'
      };
      debugLog('AggregateRating data:', aggregateRating);
      return aggregateRating;
    } catch (error) {
      debugLog('Error fetching aggregate rating:', error);
      return undefined;
    }
  };

  const getReviews = (metaTags) => {
    try {
      debugLog('Fetching reviews...');
      const reviews = [];
      const reviewCount = parseInt(metaTags['reviews:count'] || '0', 10);

      for (let i = 1; i <= reviewCount; i++) {
        const review = {
          "@type": "Review",
          "author": {
            "@type": "Person",
            "name": metaTags[`review:${i}:author`] || 'Anonymous'
          },
          "datePublished": metaTags[`review:${i}:datepublished`] ? new Date(metaTags[`review:${i}:datepublished`]).toISOString() : new Date().toISOString(),
          "description": metaTags[`review:${i}:description`] || '',
          "name": metaTags[`review:${i}:name`] || '',
          "reviewRating": {
            "@type": "Rating",
            "ratingValue": metaTags[`review:${i}:ratingvalue`] || '5',
            "bestRating": metaTags[`review:${i}:bestrating`] || '5'
          }
        };
        reviews.push(review);
        debugLog(`- Added review by ${review.author.name}`);
      }

      if (reviews.length > 0) {
        debugLog('Extracted reviews:', reviews);
        return reviews;
      }
      debugLog('- No reviews found.');
      return undefined;
    } catch (error) {
      debugLog('Error fetching reviews:', error);
      return undefined;
    }
  };

  const getPotentialAction = () => {
    try {
      debugLog('Fetching potential action...');
      const searchForm = document.querySelector('form[action*="search"], input[type="search"], input[name="s"], input[name="q"]');
      if (!searchForm) {
        debugLog('- No search form found, skipping potential action.');
        return undefined;
      }

      return {
        "@type": "SearchAction",
        "target": `${window.location.origin}/search?q={search_term_string}`,
        "query-input": "required name=search_term_string"
      };
    } catch (error) {
      debugLog('Error fetching potential action:', error);
      return undefined;
    }
  };

  const getTagList = () => {
    try {
      debugLog('Fetching tag list...');
      const tags = [];
      const tagElements = document.querySelectorAll('.tags a, .tag-list a, .post-tags a');

      tagElements.forEach(tag => {
        const tagName = tag.textContent.trim();
        const tagItem = {
          "@type": "Thing",
          "name": tagName
        };
        tags.push(tagItem);
        debugLog(`- Added tag: ${tagName}`);
      });

      if (tags.length > 0) {
        debugLog('Extracted tags:', tags);
        return tags;
      }
      debugLog('- No tags found.');
      return undefined;
    } catch (error) {
      debugLog('Error fetching tag list:', error);
      return undefined;
    }
  };

  const observeDOMChanges = (callback, selectors) => {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        selectors.forEach(selector => {
          if (mutation.addedNodes.length) {
            mutation.addedNodes.forEach(node => {
              if (node.nodeType === 1 && node.matches(selector)) {
                callback();
                observer.disconnect();
              } else if (node.querySelector && node.querySelector(selector)) {
                callback();
                observer.disconnect();
              }
            });
          }
        });
      });
    });

    observer.observe(document.body, { childList: true, subtree: true });
  };

  const getStructuredData = async (metaTags) => {
    try {
      debugLog('Generating structured data...');
      const pageType = determinePageType(metaTags);
      const externalData = await fetchExternalData();

      const structuredData = { "@context": "https://schema.org" };

      switch (pageType) {
        case 'Article':
          structuredData["@type"] = "Article";
          structuredData.author = getPerson(metaTags);
          structuredData.publisher = getOrganization(metaTags);
          structuredData.articleBody = getArticleBody();
          structuredData.datePublished = metaTags['article:published_time'] ? new Date(metaTags['article:published_time']).toISOString() : undefined;
          structuredData.dateModified = metaTags['article:modified_time'] ? new Date(metaTags['article:modified_time']).toISOString() : undefined;
          break;
        case 'Product':
          structuredData["@type"] = "Product";
          const productData = getProduct(metaTags);
          if (productData) Object.assign(structuredData, productData);
          structuredData.aggregateRating = getAggregateRating(metaTags);
          structuredData.review = getReviews(metaTags);
          break;
        case 'LocalBusiness':
          structuredData["@type"] = "LocalBusiness";
          const businessData = getLocalBusiness(metaTags);
          if (businessData) Object.assign(structuredData, businessData);
          break;
        case 'Event':
          structuredData["@type"] = "Event";
          const eventData = getEvent(metaTags);
          if (eventData) Object.assign(structuredData, eventData);
          break;
        case 'FAQPage':
          structuredData["@type"] = "FAQPage";
          structuredData.mainEntity = getFAQ();
          break;
        case 'VideoObject':
          structuredData["@type"] = "VideoObject";
          structuredData.name = metaTags['og:title'] || document.title || '';
          structuredData.description = metaTags['og:description'] || metaTags['description'] || '';
          structuredData.thumbnailUrl = metaTags['og:image'] || getDefaultImage();
          structuredData.uploadDate = metaTags['video:upload_date'] ? new Date(metaTags['video:upload_date']).toISOString() : new Date().toISOString();
          break;
        case 'CollectionPage':
          structuredData["@type"] = "CollectionPage";
          structuredData.name = metaTags['og:site_name'] || document.title || '';
          structuredData.description = metaTags['description'] || '';
          structuredData.image = getImageObjects(metaTags);
          break;
        case 'WebSite':
        default:
          structuredData["@type"] = "WebSite";
          structuredData.name = metaTags['og:site_name'] || document.title || '';
          structuredData.url = window.location.href;
          structuredData.publisher = getOrganization(metaTags);
          break;
      }

      // Basic properties
      if (pageType !== 'CollectionPage') {
        structuredData.description = metaTags['og:description'] || metaTags['description'] || '';
        structuredData.headline = metaTags['og:title'] || document.title || '';
      }

      if (metaTags['keywords']) {
        structuredData.keywords = metaTags['keywords'].split(',').map(keyword => keyword.trim());
      }

      // Images
      if (pageType !== 'CollectionPage') {
        const images = getImageObjects(metaTags);
        if (images) structuredData.image = images;
      }

      // Breadcrumb
      const breadcrumb = getBreadcrumb();
      if (breadcrumb) structuredData.breadcrumb = breadcrumb;

      // Tags
      const tags = getTagList();
      if (tags) structuredData.keywords = tags.map(tag => tag.name);

      // Potential Action (only if search exists)
      const potentialAction = getPotentialAction();
      if (potentialAction) {
        structuredData.potentialAction = potentialAction;
      }

      // Merge external data if needed
      Object.assign(structuredData, externalData);

      debugLog('Generated structured data:', structuredData);
      return structuredData;
    } catch (error) {
      debugLog('Error generating structured data:', error);
      return {};
    }
  };

  const injectStructuredData = async () => {
    try {
      debugLog('Injecting structured data...');
      // Prevent duplicate injections
      const existingScript = document.querySelector('script[type="application/ld+json"]#structured-data-script');
      if (existingScript) {
        debugLog('- Structured data script already exists, skipping injection.');
        return;
      }

      const metaTags = getMetaTags();
      const structuredData = await getStructuredData(metaTags);
      
      if (Object.keys(structuredData).length === 0) {
        debugLog('- Structured data is empty, skipping injection.');
        return;
      }

      const script = document.createElement('script');
      script.type = 'application/ld+json';
      script.textContent = JSON.stringify(structuredData, null, 2);
      script.setAttribute('id', 'structured-data-script');
      document.head.appendChild(script);
      debugLog('Structured data injected.');
    } catch (error) {
      debugLog('Error injecting structured data:', error);
    }
  };

  const init = () => {
    injectStructuredData();

    // Monitor dynamic content for FAQ sections and tags
    observeDOMChanges(() => {
      debugLog('Detected DOM changes, re-injecting structured data.');
      injectStructuredData();
    }, ['.faq-section', '.tags']);
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>
